using System.Diagnostics;
using System.Runtime.InteropServices;
using Autodesk.Revit.UI;
using RevitTranslator.Utils.App;
using RevitTranslator.Utils.ElementTextRetrievers;
using RevitTranslator.Utils.Revit;

namespace RevitTranslatorAddin.Utils.Revit;

/// <summary>
/// Represents active Revit context and general Revit-related methods. 
/// Context is updated every time a command is being executed.
/// </summary>
public class RevitUtils
{
    public static Autodesk.Revit.ApplicationServices.Application App = null;
    
    /// <summary>
    /// Active document at the moment of command's start.
    /// </summary>
    public static Document Doc { get; private set; } = null;

    /// <summary>
    /// ExternalEvent to be associated with current command.
    /// </summary>
    public static ExternalEvent ExEvent { get; private set; } = null;

    /// <summary>
    /// ExternalEventHandler that handles the execution of current command.
    /// </summary>
    public static IExternalEventHandler ExEventHandler { get; private set; } = null;
    
    public static UIApplication UIApp { get; private set; } = null;
    
    /// <summary>
    /// UIDocument for the active document.
    /// </summary>
    public static UIDocument UIDoc { get; private set; } = null;
    
    /// <summary>
    /// Creates and assigns ExternalEvent and its handler.
    /// </summary>
    public static void CreateAndAssignEvents()
    {
        ExEventHandler = new ElementUpdateHandler();
        ExEvent = ExternalEvent.Create(ExEventHandler);
    }

    /// <summary>
    /// Sets the current Revit context at the time of Command execution.
    /// </summary>
    /// <param name="uiapp"></param>
    public static void SetRevitUtils(UIApplication uiapp)
    {
        UIApp = uiapp;
        App = uiapp.Application;
        UIDoc = uiapp.ActiveUIDocument;
        Doc = UIDoc.Document;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="elements">Elements to process.</param>
    /// <param name="pwUtils">ProgressWindowUtils object for this run.</param>
    /// <param name="tUtils">TranslationUtils for this run.</param>
    /// <param name="callFromContext">True if called from Command; false if called from UI thread, e.g. ViewModel</param>
    /// <param name="translateProjectParameters">If true, project parameters will be considered.</param>
    public static void StartCommandTranslation(List<Element> elements, ProgressWindowUtils pwUtils, TranslationUtils tUtils, bool callFromContext, bool translateProjectParameters)
    {
        if (elements == null 
            || elements.Count == 0
            || pwUtils == null
            || tUtils == null)
        {
            return;
        }

        if (callFromContext)
        {
            CreateAndAssignEvents();
        }

        pwUtils.Start();

        var textRetriever = new BatchTextRetriever(elements, translateProjectParameters);
        var taskHandler = new MultiTaskTranslationHandler(tUtils, textRetriever.UnitGroups, pwUtils);

        var result = taskHandler.TranslateUnits();

        if (taskHandler.TotalTranslationCount > 0)
        {

            if (!result.Completed)
            {
                var proceed = TranslationUtils.ProceedWithUpdate();
                if (!proceed)
                {
                    return;
                }
            }

            ElementUpdateHandler.TranslationUnitGroups = textRetriever.UnitGroups;

            ExEvent.Raise();
            SetTemporaryFocus();
        }
        pwUtils.Dispose();
    }

    #region Revit Window activator
    /// <summary>
    /// Sets focus on the main Revit window momentarily.
    /// </summary>
    public static void SetTemporaryFocus()
    {
        IntPtr hBefore = GetForegroundWindow();

        // Find the Revit main window
        IntPtr revitWindow = FindRevitMainWindow();
        if (revitWindow != IntPtr.Zero)
        {
            SetForegroundWindow(revitWindow);
            SetForegroundWindow(hBefore);
        }
        else
        {
            // Handle the case where Revit window is not found
            Debug.WriteLine("Revit main window not found.");
        }
    }

    /// <summary>
    /// Finds the main window of the current Revit process.
    /// </summary>
    /// <returns>
    /// IntPtr of the Revit main window, or IntPtr.Zero if not found.
    /// </returns>
    private static IntPtr FindRevitMainWindow()
    {
        Process currentProcess = Process.GetCurrentProcess();
        IntPtr revitWindow = IntPtr.Zero;

        foreach (Process process in Process.GetProcessesByName("Revit"))
        {
            if (process.Id == currentProcess.Id)
            {
                revitWindow = process.MainWindowHandle;
                break;
            }
        }

        return revitWindow;
    }

    // This method was generated by Claude, since Jeremy's approach doesn't seem to work in R25.
    // This approach seems to work well in both R23 and R25.
    [DllImport("user32.dll")]
    static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);

    [DllImport("user32.dll")]
    static extern bool SetForegroundWindow(IntPtr hWnd);
    #endregion
}
