using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows;
using Autodesk.Revit.UI;
using Autodesk.Windows;

namespace RevitTranslatorAddin.Utils.Revit;

/// <summary>
/// Represents active Revit context. Updates every time a command is being executed.
/// </summary>
internal class RevitUtils
{
    internal static UIApplication UIApp = null;
    internal static Autodesk.Revit.ApplicationServices.Application App = null;
    internal static UIDocument UIDoc = null;
    internal static Document Doc = null;

    internal static ExternalEvent ExEvent = null;
    internal static IExternalEventHandler ExEventHandler = null;

    /// <summary>
    /// Characters that can't be used in certain Revit text properties.
    /// </summary>
    internal static readonly List<char> ForbiddenSymbols = new()
    {
        '\\', ':', '{', '}', '[', ']', '|', ';', '<', '>', '?', '`', '~'
    };

    internal static void SetUtils(UIApplication uiapp)
    {
        UIApp = uiapp;
        App = uiapp.Application;
        UIDoc = uiapp.ActiveUIDocument;
        Doc = UIDoc.Document;
    }

    /// <summary>
    /// Shows warning about using Revit 2025 (.NET8 version), since it still can cause errors.
    /// </summary>
    /// <returns>
    /// <c>MessageBoxResult</c> with user's choice.
    /// </returns>
    internal static MessageBoxResult ShowNet8Warning()
    {
        var warningResult = MessageBox.Show(messageBoxText: "Translator for Revit 2025 is still in the testing phase. " +
            "Stable performance cannot be guaranteed.\n" +
            "Do you want to save the file before starting translation?",
            caption: "Revit 2025 warning",
            MessageBoxButton.YesNoCancel,
            MessageBoxImage.Warning);

        return warningResult;
    }

    /// <summary>
    /// Take action depending on user's choice after .NET8 warning.
    /// You can save the document, skip saving or abort operation.
    /// </summary>
    /// <param name="res">The result.</param>
    /// <returns>
    /// <c>true</c> if user decides to proceed (with or without saving);
    /// <c>false</c> if user decides to abort operation
    /// </returns>
    internal static bool Net8WarningAction(MessageBoxResult res)
    {
        if (res == MessageBoxResult.Yes)
        {
            SaveRevitDocument();
        }

        else if (res == MessageBoxResult.Cancel)
        {
            return false;
        }

        return true;
    }

    private static void SaveRevitDocument()
    {
        var so = new SaveOptions();
        Doc.Save(so);
    }

    // This method was generated by Claude, since Jeremy's approach doesn't seem to work in R25.
    // This approach seems to work well in both R23 and R25.
    [DllImport("user32.dll")]
    static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll")]
    static extern bool SetForegroundWindow(IntPtr hWnd);

    [DllImport("user32.dll")]
    static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);

    /// <summary>
    /// Sets focus on the main Revit window momentarily.
    /// </summary>
    internal static void SetTemporaryFocus()
    {
        IntPtr hBefore = GetForegroundWindow();

        // Find the Revit main window
        IntPtr revitWindow = FindRevitMainWindow();
        if (revitWindow != IntPtr.Zero)
        {
            SetForegroundWindow(revitWindow);
            SetForegroundWindow(hBefore);
        }
        else
        {
            // Handle the case where Revit window is not found
            Debug.WriteLine("Revit main window not found.");
        }
    }

    /// <summary>
    /// Finds the main window of the current Revit process.
    /// </summary>
    /// <returns>
    /// IntPtr of the Revit main window, or IntPtr.Zero if not found.
    /// </returns>
    private static IntPtr FindRevitMainWindow()
    {
        Process currentProcess = Process.GetCurrentProcess();
        IntPtr revitWindow = IntPtr.Zero;

        foreach (Process process in Process.GetProcessesByName("Revit"))
        {
            if (process.Id == currentProcess.Id)
            {
                revitWindow = process.MainWindowHandle;
                break;
            }
        }

        return revitWindow;
    }

}
